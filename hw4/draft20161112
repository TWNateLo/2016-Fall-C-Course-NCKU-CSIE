#include <stdio.h>
#include <stdlib.h>
#include <math.h>
//function declaration
void add(int n, float m1[n][n], float m2[n][n]);
void multiplication(int n, float m1[n][n], float m2[n][n]);
int determ(int n, int a[n][n]);

//main function
int main (int argc, char* argv[]) {
        int n, d, e, f = 4, sum = 0, i, o;
        //argv[1]
        n = atoi(argv[1]);
        //argv[2] in the functions
        //argv[3]
        float m1[n][n];
        float m2[n][n];
        int im1[n][n];
        //Matrices Random Generation
        if(atoi(argv[3]) == 0 && atoi(argv[2]) != 2) {
                srand(time(NULL));
                for(d = 0; d < n; d++) {
                        for(e = 0; e < n; e++) {
                                m1[d][e] = rand() % 100 + 1;
                                printf("%f\n", m1[d][e]);
                        }
                }
                for(d = 0; d < n; d++) {
                        for(e = 0; e < n; e++) {
                                m2[d][e] = rand() % 100 + 1;
                                printf("%f\n", m2[d][e]);
                        }
                }
        }
        if(atoi(argv[3]) == 0 && atoi(argv[2]) == 2) {
                srand(time(NULL));
                for(d = 0; d < n; d++) {
                        for(e = 0; e < n; e++) {
                                im1[d][e] = rand() % 100 + 1;
                        }
                }
        }
        //Matrices Key In
        if(atoi(argv[3]) == 1) {
                for(d = 0; d < n; d++) {
                        for(e = 0; e < n; e++) {
                                m1[d][e] = atof(argv[f]);
                                f++;
                        }
                }
                if(atoi(argv[2]) == 0 || atoi(argv[2]) == 1) {
                        for(d = 0; d < n; d++) {
                                for(e = 0; e < n; e++) {
                                        m2[d][e] = atof(argv[f]);
                                        f++;
                                }
                        }
                }
                if(atoi(argv[2]) == 2){
                        f = 4;
                        for(d = 0; d < n; d++) {
                                for(e = 0; e < n; e++) {
                                        im1[d][e] = atof(argv[f]);
                                        f++;
                                }
                        }
                }


        }
        //Addition Call
        if(atoi(argv[2]) == 0) {
                add(n, m1, m2);
        }
        //Multiplication Call
        if(atoi(argv[2]) == 1) {
                multiplication(n, m1, m2);
        }
        //Determincation Call
        if(atoi(argv[2]) == 2) {
                printf("%d\n", determ(n, im1));
        }
}

//Addition Function
void add(int n, float m1[n][n], float m2[n][n]) {
        int a, b, sum = 0;
        float fin[n][n];
        for(a = 0; a < n; a++) {
                for(b = 0; b < n; b++) {
                        sum = m1[a][b] + m2[a][b];
                        fin[a][b] = sum;
                        sum = 0;
                }
        }

        for(a = 0; a < n; a++) {
                for(b = 0; b < n; b++) {
                        printf("%d", (int)fin[a][b]);
                        printf(" ");
                }
        }
        printf("\n");
}

//Multiplication Function
void multiplication(int n, float m1[n][n], float m2[n][n]) {
        int a, b, c, sum = 0;
        float fin[n][n];
        for(a = 0; a < n; a++) {
                for(b = 0; b < n; b++) {
                        for(c = 0; c < n; c++) {
                                sum = sum + m1[a][c] * m2[c][b];
                        }
                        fin[a][b] = sum;
                        sum = 0;
                }
        }

        for(a = 0; a < n; a++) {
                for(b = 0; b < n; b++) {
                        printf("%d", (int)fin[a][b]);
                        printf(" ");
                }
        }
        printf("\n");
}
/*Determination Function
  float det(int n, float m1[n][n]) {

  }*/

//code from hehe
int determ(int n, int a[][n])
{
        int det=0,p,h,k,i,j,temp[n][n];
        if(n==1)
        {
                return a[0][0];
        }
        else if(n==2)
        {
                det=(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
                return det;
        }
        else
        {
                for(p=0;p<n;p++)
                {
                        h = 0;
                        k = 0;
                        for(i=1;i<n;i++)
                        {
                                for( j=0;j<n;j++)
                                {
                                        if(j==p)
                                        {
                                                continue;
                                        }
                                        temp[h][k] = a[i][j];
                                        k++;
                                        if(k==n-1)
                                        {
                                                h++;
                                                k = 0;
                                        }
                                }
                        }
                        det=det+a[0][p]*pow(-1,p)*determ(n-1, temp);
                }
                return det;
        }
}
